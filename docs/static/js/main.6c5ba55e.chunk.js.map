{"version":3,"sources":["components/game/Header.js","components/game/Cell.js","components/game/Board.js","components/game/Game.js","components/history/History.js","components/menu/Menu.js","components/ui/Navbar.js","routers/AppRouter.js","App.js","index.js"],"names":["Header","leftMines","elapsedTime","className","Cell","pos","clickCallback","rightClickCallback","id","toString","onClick","onContextMenu","Board","timerActive","dif","srows","scols","smines","load","setLoad","setLeftMines","setTimerActive","setElapsedTime","useState","boardState","setBoardState","loaded","setLoaded","startTime","setStartTime","levelComplete","setLevelComplete","saveData","setSaveData","ref","createRef","savebutton","messagediv","rows","cols","mines","diff","createBoard","newBoardState","row","thisrow","col","element","position","mine","push","loadboard","boardcode","forEach","item","getCurrentTime","i","Math","floor","random","currentDate","Date","year","getFullYear","day","getDate","padStart","getMonth","getHours","getMinutes","getFromBoard","x","y","current","children","handleClick","clickedcell","classList","contains","parseInt","split","add","innerHTML","firstChild","endGame","surroundingmines","max","min","adjacent","checkCompletion","handleRightClick","e","preventDefault","target","rmines","remove","checklevelcomplete","localStorage","removeItem","status","addToHistory","prevhistory","JSON","parse","getItem","thisgame","difficulty","time","start","endtime","setItem","stringify","useEffect","loadBoard","loadflag","flagcode","loadclicked","clickedcode","elapsedtime","loadGameData","map","key","val","tempboardcode","tempflagcode","tempclickedcode","tosavedata","cell","Game","props","undefined","location","state","width","height","params","timerInterval","useRef","history","useHistory","console","log","setInterval","addTime","clearInterval","replace","History","setHistory","sortByDifficulty","v1","v2","a","b","includes","thistory","sort","getlist","disabled","Menu","loadbutton","value","setValue","disableinput","document","getElementById","readOnly","enableinput","valuechange","name","onSubmit","onChange","type","defaultChecked","required","Navbar","exact","to","AppRouter","path","component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.6c5ba55e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//No functions, just shows the data in the header\r\nconst Header = ({ leftMines, elapsedTime }) => {\r\n    return (\r\n        <div className=\"container mt-2\">\r\n            <div className=\"row\">\r\n                <div className=\"col-4\">\r\n                    <h3> {leftMines} &#128163; </h3>\r\n                </div>\r\n                <div className=\"col-8\">\r\n                    <h3>{elapsedTime[0]}h : {elapsedTime[1]} m : {elapsedTime[2]}s</h3>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\n\r\n//It returns a cell. It's a div with the cell position as id, and the functions to click and right click it\r\nexport const Cell = ({ pos, clickCallback, rightClickCallback }) => {\r\n    const id = pos[0].toString() + ',' + pos[1].toString();\r\n    \r\n    return (\r\n        <div className={'cell'} id={id} onClick={clickCallback} onContextMenu={rightClickCallback}>\r\n        </div>\r\n    )\r\n}\r\n","import React, { createRef, useEffect, useState } from 'react'\r\nimport { Cell } from './Cell';\r\n\r\nconst Board = ({ timerActive, dif, srows, scols, smines, load, setLoad, setLeftMines, leftMines, setTimerActive, elapsedTime, setElapsedTime }) => {\r\n    const [boardState, setBoardState] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [startTime, setStartTime] = useState('');\r\n    const [levelComplete, setLevelComplete] = useState(false);\r\n    const [saveData, setSaveData] = useState(null);\r\n    const ref = createRef();\r\n    const savebutton = createRef();\r\n    const messagediv = createRef();\r\n    let rows = srows;\r\n    let cols = scols;\r\n    let mines = smines;\r\n    let diff = dif;\r\n\r\n    /////////////Initial functions////////////\r\n\r\n    //It creates a new board with the parameters selected by the user\r\n    const newGame = () => {\r\n        createBoard();\r\n    }\r\n\r\n    //If it's a loaded game, it sets the loaded information to the state saveData\r\n    const loadinfo = () => {\r\n        setSaveData(JSON.parse(localStorage.getItem('save')));\r\n    }\r\n\r\n    //It creates the board corresponding to the loaded values\r\n    const loadBoard = () => {\r\n        //Set the global variables rows, cols and mines to the loaded values\r\n        rows = saveData.rows;\r\n        cols = saveData.cols;\r\n        mines = saveData.mines;\r\n        diff = saveData.dif;\r\n        createBoard()\r\n        let rmines = saveData.leftMines;\r\n        setLeftMines(rmines); //Set the state  of remaining mines \r\n        setLoaded(true); //Set loaded state. It tells that the board is done\r\n    }\r\n\r\n    //It adds the flags,clicks and other things from the loaded values\r\n    const loadGameData = () => {\r\n        let loadflag = saveData.flagcode;\r\n        let loadclicked = saveData.clickedcode;\r\n        for (let row = 0; row < rows; row++) {\r\n            loadflag[row].forEach((item) => {//Adds flags to the corresponding displaying cells\r\n                let element = getFromBoard(row, item);\r\n                element.classList.add('flag');\r\n                element.innerHTML = '&#128681';\r\n            });\r\n        }\r\n        for (let row = 0; row < rows; row++) {\r\n            loadclicked[row].forEach((item) => {\r\n                let element = getFromBoard(row, item);\r\n                handleClick(element);//\"Clicks\" the corresponding cells\r\n            });\r\n        }\r\n        let elapsedtime = saveData.elapsedTime;\r\n        setElapsedTime(elapsedtime); //Sets the timer\r\n        setStartTime(saveData.startTime);//Sets the started time to the local values\r\n        setTimerActive(false);\r\n        setLoaded(false);\r\n\r\n    }\r\n\r\n    //It creates the board. \r\n    const createBoard = () => {\r\n        let newBoardState = [];\r\n        for (let row = 0; row < rows; row++) {//Creating a 2d array.\r\n            const thisrow = [];\r\n            for (let col = 0; col < cols; col++) {\r\n                const element = {//Each element has its own position and mine value (true if it has a mine)\r\n                    position: [row, col],\r\n                    mine: false,\r\n                }\r\n                thisrow.push(element);\r\n            }\r\n            newBoardState.push(thisrow);\r\n        }\r\n\r\n        //If it's a new game, it sets x mines in random places (x previously selected by the user)\r\n        //otherwise it sets the corresponding loaded mines\r\n        if (!load) {\r\n            setStartTime(getCurrentTime());\r\n            let i = 0;\r\n            while (i < mines) {\r\n                let row = Math.floor(Math.random() * rows);\r\n                let col = Math.floor(Math.random() * cols);\r\n                if (!newBoardState[row][col].mine) {\r\n                    newBoardState[row][col].mine = true;\r\n                    i = i + 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let loadboard = saveData.boardcode;\r\n            for (let row = 0; row < rows; row++) {\r\n                loadboard[row].forEach((item) => {\r\n                    newBoardState[row][item].mine = true;\r\n                });\r\n            }\r\n        }\r\n        setBoardState(newBoardState);//Set boardState (that later is displayed)\r\n    }\r\n\r\n\r\n    /////////////Functional functions////////////////////////////\r\n\r\n    //Return the current time in MM-DD-YYYY hh:mm 12h format\r\n    const getCurrentTime = () => {\r\n        let currentDate = new Date();\r\n        let year = currentDate.getFullYear();\r\n        let day = currentDate.getDate().toString().padStart(2, '0');\r\n        let month = (currentDate.getMonth() + 1).toString().padStart(2, '0');\r\n        let hour = (currentDate.getHours() === 12 ? 12 : (currentDate.getHours() % 12)).toString().padStart(2, '0');\r\n        let minutes = (currentDate.getMinutes() + '').padStart(2, '0');\r\n        let pmam = currentDate.getHours() > 11 ? 'pm' : 'am';\r\n        return (month + '-' + day + '-' + year + ' ' + hour + ':' + minutes + pmam)\r\n    }\r\n\r\n    //Gets the displayed item from the DOM in x y position\r\n    const getFromBoard = (x, y) => ref.current.children[x].children[y];\r\n\r\n\r\n    //Check if the clicked cell has a mine or the amount of mines from its neighbors\r\n    const handleClick = (clickedcell) => {\r\n        //Check if the cell wasn't previously clicked, has a flag or the game hasn't ended\r\n        if (!clickedcell.classList.contains('flag') && !clickedcell.classList.contains('clicked') && !clickedcell.classList.contains('lose')) {\r\n            let pos = clickedcell.id; //The ID of every rendered cell is it's position in the format \"x,y\"\r\n            const x = parseInt(pos.split(',')[0]);\r\n            const y = parseInt(pos.split(',')[1]);\r\n            const cell = boardState[x][y]\r\n            if (cell.mine) {//If the click was on a mine, ends the game and marks that cell in red\r\n                clickedcell.classList.add('extreme');\r\n                clickedcell.innerHTML = '&#128163';\r\n                messagediv.current.firstChild.innerHTML = 'You lose. Better luck next time!'\r\n                endGame(false);\r\n            }\r\n            else {//If the click wasn't on a mine, check the mines of its neighbors\r\n                let surroundingmines = 0;\r\n                clickedcell.classList.add('clicked');\r\n                for (let row = Math.max(0, x - 1); row <= Math.min(x + 1, rows - 1); row++) {\r\n                    for (let col = Math.max(0, y - 1); col <= Math.min(y + 1, cols - 1); col++) {\r\n                        if (boardState[row][col].mine) {\r\n                            surroundingmines++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (surroundingmines === 0) {//If none of the neighbors have mines, checks  the neighbors of the neighbors until it finds mines or the board ends\r\n                    clickedcell.classList.add('none');\r\n                    for (let row = Math.max(0, x - 1); row <= Math.min(x + 1, rows - 1); row++) {\r\n                        for (let col = Math.max(0, y - 1); col <= Math.min(y + 1, cols - 1); col++) {\r\n                            var adjacent = getFromBoard(row, col)\r\n                            if (!adjacent.classList.contains('clicked')) {\r\n                                handleClick(adjacent);//and \"clicks\" the adjacent cell\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Sets classes to the cell that changes its color depending of the amount of mines\r\n                else {\r\n                    if (surroundingmines < 3) {\r\n                        clickedcell.classList.add('low');\r\n                    }\r\n                    else if (surroundingmines < 5) {\r\n                        clickedcell.classList.add('mid');\r\n                    }\r\n                    else if (surroundingmines < 7) {\r\n                        clickedcell.classList.add('high');\r\n                    }\r\n                    else {\r\n                        clickedcell.classList.add('extreme');\r\n                    }\r\n                    clickedcell.innerHTML = surroundingmines;\r\n                }\r\n                checkCompletion();//After every click, checks if the game is completed\r\n            }\r\n        }\r\n    }\r\n\r\n    //Adds or remove a flag from the rightclicked cell\r\n    const handleRightClick = (e) => {\r\n        if (!timerActive) {\r\n            setTimerActive(true); //It starts the timer if this is the first click of the game\r\n        }\r\n        e.preventDefault();\r\n        let clickedcell = e.target;\r\n        if (!clickedcell.classList.contains('clicked') && !clickedcell.classList.contains('lose')) {//Checks if the game isn't ended and the cell isn't already clicked\r\n            setTimerActive(true);//\r\n\r\n            let rmines = leftMines;\r\n            if (clickedcell.classList.contains('flag')) {\r\n                clickedcell.classList.remove('flag');\r\n                clickedcell.innerHTML = '';\r\n                rmines++;\r\n            }\r\n            else {\r\n                clickedcell.classList.add('flag');\r\n                clickedcell.innerHTML = '&#128681';\r\n                rmines--;\r\n            }\r\n            setLeftMines(rmines);//Updates the left mines counter\r\n        }\r\n    }\r\n\r\n    //Check if the game is completed\r\n    const checkCompletion = () => {\r\n        if (!levelComplete) {//prevents the function to run if the game is completed\r\n            let checklevelcomplete = true;\r\n            for (let row = 0; row < rows; row++) {//Checks if the unclicked cells have mines\r\n                for (let col = 0; col < cols; col++) {\r\n                    let cell = getFromBoard(row, col);\r\n                    if (!cell.classList.contains('clicked') && boardState[row][col].mine === false) {\r\n                        checklevelcomplete = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //If the game is completed \r\n            //I used messagediv.current.firstChild.innerHTML because the states have some delay in updating and the game \r\n            //entered this function several times, producing duplicate data in the game history\r\n            if (checklevelcomplete && messagediv.current.firstChild.innerHTML !== 'Congratulations! You win!') {\r\n                messagediv.current.firstChild.innerHTML = 'Congratulations! You win!';\r\n                setLevelComplete(true)\r\n                setLeftMines(0);\r\n                endGame(true);\r\n                if (load) {//If it's a loaded game and the user wins, it removes the save\r\n                    setLoad(false)\r\n                    localStorage.removeItem(\"save\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //It ends the game. Status should be true for win or false for lose\r\n    const endGame = (status) => {\r\n        //Due to something I couldn't find, this function didn't load the proper values of rows, cols and mines if \r\n        //the game was loaded. Just for that, I reassign the values if necessary        \r\n        if (load) {\r\n            rows = saveData.rows;\r\n            cols = saveData.cols;\r\n            mines = saveData.mines;\r\n        }\r\n        setTimerActive(false);//Stop the timer\r\n        savebutton.current.classList.add('disabled');//Disable the save game button\r\n        for (let row = 0; row < rows; row++) {//Display every mine on the board\r\n            for (let col = 0; col < cols; col++) {\r\n                let element = getFromBoard(row, col);\r\n                element.classList.add('lose');\r\n                if (boardState[row][col].mine) {\r\n                    element.innerHTML = '&#128163';\r\n                }\r\n            }\r\n        }\r\n        addToHistory(status);//Add the game to the game history\r\n    }\r\n\r\n    //It restarts all the counters and creates a new random board with the same parameters of the previous game\r\n    const restart = () => {\r\n        setLevelComplete(false);\r\n        setLoad(false);\r\n        setTimerActive(false);\r\n        setElapsedTime([0, 0, 0])\r\n        messagediv.current.firstChild.innerHTML = ''\r\n\r\n        savebutton.current.classList.remove('disabled')//Enable the save button if it's disabled\r\n        for (let row = 0; row < rows; row++) {\r\n            for (let col = 0; col < cols; col++) {\r\n                let cell = getFromBoard(row, col);\r\n                cell.classList = 'cell';\r\n                cell.innerHTML = '';\r\n            }\r\n        }\r\n        setBoardState([]);\r\n        createBoard(rows, cols, mines, true);\r\n        setLeftMines(mines);\r\n    }\r\n\r\n    //It adds the finished game to the history\r\n    const addToHistory = (status) => {\r\n        let prevhistory = (JSON.parse(localStorage.getItem('hist')));\r\n        let thisgame = {\r\n            difficulty: diff + '(' + rows + 'x' + cols + ', ' + mines + 'mines)',\r\n            time: elapsedTime[0] + 'h ' + elapsedTime[1] + 'm ' + elapsedTime[2] + 's',\r\n            status: status,\r\n            start: startTime,\r\n            endtime: getCurrentTime()\r\n        };\r\n        if (!prevhistory) {\r\n            prevhistory = [];\r\n            prevhistory.push(thisgame);\r\n            localStorage.setItem(\"hist\", JSON.stringify(prevhistory));\r\n        }\r\n        else {\r\n            prevhistory.push(thisgame);\r\n            localStorage.setItem(\"hist\", JSON.stringify(prevhistory));\r\n        }\r\n\r\n    }\r\n\r\n    //It saves the game\r\n    const saveGame = () => {\r\n        var boardcode = [];\r\n        var flagcode = [];\r\n        var clickedcode = [];\r\n\r\n        //For this function, I use arrays. One for the mines, one for the flags and one for the clicked cells.\r\n        //The data saved is one array per row of the board, and in each one it have the position number of the columns\r\n        //that contains flags, mines or clicks.\r\n        for (let row = 0; row < rows; row++) {\r\n            let tempboardcode = [];\r\n            let tempflagcode = [];\r\n            let tempclickedcode = [];\r\n            for (let col = 0; col < cols; col++) {\r\n                let element = getFromBoard(row, col);\r\n                let currentboard = boardState[row][col];\r\n                if (currentboard.mine) {\r\n                    tempboardcode.push(col)\r\n                }\r\n                if (element.classList.contains('flag')) {\r\n                    tempflagcode.push(col);\r\n                }\r\n                if (element.classList.contains('clicked')) {\r\n                    tempclickedcode.push(col);\r\n                }\r\n            }\r\n            boardcode.push(tempboardcode);\r\n            flagcode.push(tempflagcode);\r\n            clickedcode.push(tempclickedcode);\r\n\r\n        }\r\n        //It also saves the started and elapsed time and the board parameters\r\n        let tosavedata = { dif, startTime, elapsedTime, rows, cols, mines, leftMines, boardcode, flagcode, clickedcode }\r\n        localStorage.setItem(\"save\", JSON.stringify(tosavedata));\r\n\r\n    }\r\n\r\n    //At the beginning check if it's a new or loaded game\r\n    useEffect(() => {\r\n        if (load) {\r\n            loadinfo();\r\n        }\r\n        else {\r\n            newGame();\r\n        }\r\n    }, []);\r\n\r\n   //It executes if it's a loaded game and the data is already in the saveData state\r\n    useEffect(() => {\r\n        if (saveData !== null) {\r\n            loadBoard();\r\n        }\r\n    }, [saveData]);\r\n\r\n    //It executes if it's a loaded game and the board is already created\r\n    useEffect(() => {\r\n        if (load && loaded) {\r\n            loadGameData();\r\n        }\r\n    }, [loaded]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div ref={ref} id='board'>\r\n                {boardState.map((element, key) => (\r\n                    <div className='cellrow' id={key} key={key}>\r\n                        {\r\n                            element.map((val, key) => (\r\n                                <Cell key={key} pos={val.position} clickCallback={element => handleClick(element.target)} rightClickCallback={handleRightClick} />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"mt-2 mb-2 buttons\">\r\n                <button ref={savebutton} className='btn btn-dark' onClick={saveGame}> Save game</button>\r\n\r\n                <button className='btn btn-danger' onClick={restart}> Restart</button>\r\n            </div>\r\n            <div ref={messagediv}>\r\n                <h1></h1>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default Board","import React, { useEffect, useRef, useState } from 'react'\r\nimport Header from './Header'\r\nimport Board from './Board'\r\nimport { useHistory } from 'react-router'\r\n\r\nconst Game = (props) => {\r\n    let { width, height, mines, dif } = props.location.state === undefined?{width:0,height:0,mines:0,dif:''}:props.location.state.params;\r\n    const [leftMines, setLeftMines] = useState(mines);\r\n    const [elapsedTime, setElapsedTime] = useState([0, 0, 0]);\r\n    const [timerActive, setTimerActive] = useState(false);\r\n    const [load, setLoad] = useState(props.location.state === undefined?null:props.location.state.load);\r\n    const timerInterval = useRef();\r\n    const history = useHistory();\r\n\r\n    //It adds one second to the timer. If it reachs 60, sets to 0 and add a minute. And the same for the hour\r\n    const addTime = () => {\r\n        let time = elapsedTime;\r\n        time[2]++;\r\n        if (time[2] >= 60) {\r\n            time[2] = 0;\r\n            time[1]++;\r\n        }\r\n        if (time[1] >= 60) {\r\n            time[1] = 0;\r\n            time[0]++\r\n        }\r\n        setElapsedTime([time[0], time[1], time[2]]);\r\n\r\n    }\r\n\r\n    //It starts the timer when timerActive state is true and stops it if it's false\r\n    useEffect(() => {\r\n        console.log(props);\r\n        if (timerActive) {\r\n            timerInterval.current = setInterval(() => {\r\n                addTime();\r\n            }, 1000);\r\n        }\r\n        return () => clearInterval(timerInterval.current);\r\n    }, [timerActive])\r\n\r\n    useEffect(() => {\r\n        if(props.location.state === undefined){\r\n            history.replace(\"/menu\");//Avoids hardcodding the path without props\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Header leftMines={leftMines} elapsedTime={elapsedTime} />\r\n            <Board timerActive={timerActive} dif={dif} srows={height} scols={width} smines={mines} elapsedTime={elapsedTime} setElapsedTime={setElapsedTime} load={load} setLoad={setLoad} leftMines={leftMines} setLeftMines={setLeftMines} setTimerActive={setTimerActive} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nconst History = () => {\r\n    const[history,setHistory] = useState(null);\r\n\r\n    //It clears the history if the button is clicked\r\n    const clearHistory = () =>{\r\n        setHistory(null);\r\n        localStorage.removeItem('hist')\r\n    }\r\n\r\n    //It returns -1 if v1<v2, 1 if v1>v2 or 0 if v1 === v2\r\n    const sortByDifficulty = (v1,v2) =>{       \r\n        let a = v1.difficulty;\r\n        let b = v2.difficulty;\r\n\r\n        if (a===b){\r\n            return 0;\r\n        }\r\n        if(a.includes('Custom')){\r\n            return 1\r\n        }\r\n        if(b.includes('Custom')){\r\n            return -1\r\n        }   \r\n        if (a.includes('Easy')){\r\n                return 1;\r\n        }\r\n        \r\n        if (a.includes('Hard')){\r\n            return -1;\r\n    }\r\n        if (a.includes('Medium')){\r\n            if (b.includes('Easy')){\r\n                return -1;\r\n            }\r\n            return 1;\r\n        }   \r\n    }\r\n\r\n    //It gets the history data and sorts it \r\n    const getlist = () =>{ \r\n        if (localStorage.getItem('hist')) {\r\n            let thistory = (JSON.parse(localStorage.getItem('hist'))); \r\n            thistory.sort(sortByDifficulty);\r\n            setHistory(thistory);\r\n        }\r\n    }\r\n\r\n    //On load, get the data\r\n    useEffect(() => {\r\n        getlist();\r\n    }, [])\r\n    \r\n\r\n   \r\n\r\n    return (\r\n        <div className=\"container mt-2\">\r\n            <button className=\"btn btn-dark\" onClick={clearHistory} disabled={history===null?true:false}>Clear History</button>\r\n            <table className=\"table table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Start time</th>\r\n                        <th>End time</th>\r\n                        <th>Difficulty</th>\r\n                        <th>Time spent</th>\r\n                        <th>Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {history != null ? history.map((val, key) => {\r\n                        return (\r\n                            <tr key={key}>         \r\n                                <td>{val.start}</td>\r\n                                <td>{val.endtime}</td>\r\n                                <td>{val.difficulty}</td>\r\n                                <td>{val.time}</td>\r\n                                <td><span className={val.status?'badge bg-success':'badge bg-danger'}>{val.status?'Won':'Lost'}</span></td>\r\n                            </tr>\r\n                        );\r\n                    }) : null}\r\n\r\n                </tbody>\r\n            </table>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default History\r\n","import React, { createRef, useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Menu = () => {\r\n    const history = useHistory();\r\n    const loadbutton = createRef();\r\n    const [value, setValue] = useState({\r\n        width: 10,\r\n        height: 10,\r\n        mines: 10,\r\n        dif:'Easy'\r\n    });\r\n    const { width, height, mines, dif } = value;\r\n\r\n  //On clicking \"new game\", sends the game parameters to the Game component and redirects to the game\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        history.push(\"/game\", {\r\n            params: value, load: false, dif\r\n        });\r\n\r\n    }\r\n\r\n    //On clicking \"load game\", it redirects to the game and sends load:true to the component\r\n    const handleLoad = () =>{\r\n        history.push(\"/game\", {\r\n            params: value, load: true\r\n        });\r\n    }\r\n\r\n    //It sets the default values of each difficulty and enables/disables the input for the custom values\r\n    const radiochange = ({ target }) => {\r\n        if (target.value === \"easy\") {\r\n            setValue({ width: 10, height: 10, mines: 10, dif:'Easy' });\r\n            disableinput();\r\n        }\r\n        else if (target.value === \"medium\") {\r\n            setValue({ width: 15, height: 15, mines: 40, dif:'Medium'});\r\n            disableinput();\r\n        }\r\n        else if (target.value === \"hard\") {\r\n            setValue({ width: 25, height: 25, mines: 100, dif:'Hard' });\r\n            disableinput();\r\n        }\r\n        else {\r\n            enableinput();\r\n        }\r\n    }\r\n\r\n    //Disalbles the input\r\n    const disableinput = () => {\r\n        document.getElementById(\"mines\").readOnly = true;\r\n        document.getElementById(\"width\").readOnly = true;\r\n        document.getElementById(\"height\").readOnly = true;\r\n    }\r\n\r\n    //Enables the input\r\n    const enableinput = () => {\r\n        document.getElementById(\"mines\").readOnly = false;\r\n        document.getElementById(\"width\").readOnly = false;\r\n        document.getElementById(\"height\").readOnly = false;\r\n    }\r\n\r\n    //Sets the new values to the state if some value change\r\n    const valuechange = ({ target }) => {\r\n        if (target.value) {\r\n            let e = parseInt(target.value);\r\n            if (target.name === \"mines\") {//Mines have a limit of 80% of the board, and can't be less than one\r\n                if (target.value > (width * height * 0.8)) {\r\n                    e = width * height * 0.8;\r\n                }\r\n                else if (target.value < 1) {\r\n                    e = 1;\r\n                }\r\n            }\r\n            else if (target.value > 50) {//Width and height can't be less than 2 or more than 50\r\n                e = 50;\r\n            }\r\n            else if (target.value < 2) {\r\n                e = 2;\r\n            }\r\n            setValue({\r\n                ...value,\r\n                [target.name]: e,\r\n                dif:'Custom'\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    //Checks if there's a saved game and enables the load game button\r\n    useEffect(() => {\r\n        if (localStorage.getItem('save')) {\r\n            loadbutton.current.classList.remove('disabled')\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h3>New Game</h3>\r\n                <form onSubmit={handleSubmit} >\r\n                    <div onChange={radiochange}>\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"difficultyradios\" id=\"easyradio\" value=\"easy\" defaultChecked />\r\n                            <label className=\"form-check-label\">\r\n                                Easy\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"difficultyradios\" id=\"mediumradio\" value=\"medium\" />\r\n                            <label className=\"form-check-label\">\r\n                                Medium\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"difficultyradios\" id=\"hardradio\" value=\"hard\" />\r\n                            <label className=\"form-check-label\">\r\n                                Hard\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"difficultyradios\" id=\"customradio\" value=\"custom\" />\r\n                            <label className=\"form-check-label\">\r\n                                Custom\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-4\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <label>Width</label>\r\n                                <input type=\"number\" name=\"width\" id=\"width\" className=\"form-control\" value={width} onChange={valuechange} min=\"2\" max=\"50\" required readOnly />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <label>Height</label>\r\n                                <input type=\"number\" name=\"height\" id=\"height\" className=\"form-control\" value={height} onChange={valuechange} min=\"2\" max=\"50\" required readOnly />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <label>Mines</label>\r\n                                <input type=\"number\" name=\"mines\" id=\"mines\" className=\"form-control\" value={mines} onChange={valuechange} min=\"1\" max=\"2500\" required readOnly />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"btn btn-dark mt-5\">Start</button>\r\n\r\n                </form>\r\n\r\n                <hr />\r\n                <h3>Load Game</h3>\r\n\r\n                <button ref={loadbutton} onClick={handleLoad} className=\"btn btn-dark mb-2 disabled\">Start</button>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\n\nexport const Navbar = () => {\n    return (\n        <div className=\"container mt-2\">\n           <ul className=\"nav nav-pills\">\n                <li className=\"nav-item\">\n                    <NavLink exact to=\"/\" className=\"nav-link\">\n                        Main menu \n                    </NavLink>\n                </li>\n                <li className=\"nav-item\">\n                    <NavLink exact to=\"/history\" className=\"nav-link\">\n                        Game history\n                    </NavLink>\n                </li>\n                <li className=\"nav-item\">\n                    <NavLink  exact to=\"/game\" className=\"nav-link  disabled\">\n                        Game\n                    </NavLink>\n                </li>\n            </ul>\n        </div>\n    )\n}","import React from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from 'react-router-dom';\r\nimport Game from '../components/game/Game';\r\nimport History from '../components/history/History';\r\nimport Menu from '../components/menu/Menu';\r\nimport { Navbar } from '../components/ui/Navbar';\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <div className=\"background\">\r\n            <Router>\r\n                <Navbar />\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Menu} />\r\n                    <Route exact path=\"/game\" component={Game} />\r\n                    <Route exact path=\"/history\" component={History} />\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { AppRouter } from './routers/AppRouter'\nimport './styles/board.css'\n\nfunction App() {\n    return ( <\n        AppRouter / >\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}